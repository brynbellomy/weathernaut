// Generated by CoffeeScript 1.6.1
var apiKey, async, cache, cacheFile, cachedDataExistsFor, cachedDataIsNotStaleFor, cachedDataIsValidFor, doAPIRequest, ensureCacheFileExists, fs, getDataFor, handleError, maxCacheAgeInMsec, path, printAstronomicalData, readExistingCache, request, updateCacheFor, url, writeMemoryCacheToDisk, zip;

require('colors');

request = require('request');

fs = require('fs');

path = require('path');

async = require('async');

zip = '77007';

apiKey = 'c6e532deca195eda';

url = "http://api.wunderground.com/api/" + apiKey + "/astronomy/q/" + zip + ".json";

cacheFile = path.join(process.env.HOME, '.weathernaut');

cache = {};

maxCacheAgeInMsec = 1000 * 60 * 60 * 12;

handleError = function(func, err) {
  console.error("Error in " + func + ": " + (err.toString().red));
  return process.exit(1);
};

ensureCacheFileExists = function() {
  if (!fs.existsSync(cacheFile)) {
    return fs.writeFileSync(cacheFile, JSON.stringify({}));
  }
};

readExistingCache = function() {
  ensureCacheFileExists();
  return cache = (function() {
    try {
      return JSON.parse(fs.readFileSync(cacheFile).toString());
    } catch (err) {
      return {};
    }
  })();
};

cachedDataExistsFor = function(zipcode) {
  return (cache != null ? cache[zipcode] : void 0) != null;
};

cachedDataIsNotStaleFor = function(zipcode) {
  var _ref;
  return (new Date().getTime() - (cache != null ? (_ref = cache[zipcode]) != null ? _ref.retrievedOn : void 0 : void 0)) < maxCacheAgeInMsec;
};

cachedDataIsValidFor = function(zipcode) {
  return cachedDataExistsFor(zipcode) && cachedDataIsNotStaleFor(zipcode);
};

doAPIRequest = function(zipcode, callback) {
  return request(url, function(err, response, body) {
    var bodyObject, _ref;
    if (err != null) {
      handleError('ensureCacheIsFilled', err);
    }
    if ((response != null ? response.statusCode : void 0) !== 200) {
      handleError('ensureCacheIsFilled', "http status code was " + (response != null ? (_ref = response.statusCode) != null ? _ref.toString().yellow : void 0 : void 0));
    }
    body = body != null ? typeof body.toString === "function" ? body.toString() : void 0 : void 0;
    bodyObject = JSON.parse(body);
    delete bodyObject.response;
    bodyObject.retrievedOn = new Date().getTime();
    return callback(null, bodyObject);
  });
};

writeMemoryCacheToDisk = function() {
  try {
    return fs.writeFileSync(cacheFile, JSON.stringify(cache));
  } catch (err) {
    return handleError('ensureCacheIsFilled', err);
  }
};

updateCacheFor = function(zipcode, callback) {
  return doAPIRequest(zipcode, function(err, dataForZip) {
    if (err != null) {
      return callback(err);
    }
    cache[zipcode] = dataForZip;
    writeMemoryCacheToDisk();
    return callback();
  });
};

getDataFor = function(zipcode, callback) {
  ensureCacheFileExists();
  readExistingCache();
  if (cachedDataIsValidFor(zipcode)) {
    return callback(null, cache[zipcode]);
  } else {
    return updateCacheFor(zipcode, function(err) {
      return callback(err, cache[zipcode]);
    });
  }
};

printAstronomicalData = function(data) {
  var formattedLines, header, line, lines, moon_phase, percentIlluminated, sunrise, sunset;
  try {
    moon_phase = data.moon_phase;
    percentIlluminated = moon_phase.percentIlluminated, sunrise = moon_phase.sunrise, sunset = moon_phase.sunset;
    lines = [['moon:    ', "" + (percentIlluminated.toString()) + "% full"], ['sunrise: ', "" + (sunrise.hour.toString()) + ":" + (sunrise.minute.toString())], ['sunset:  ', "" + (sunset.hour.toString()) + ":" + (sunset.minute.toString())]];
    header = '***'.white.bold + (" astronomy for " + zip + " ").red.bold + '***'.white.bold;
    formattedLines = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        _results.push(' --> '.white.bold + line[0].toString().red + ' ' + line[1].toString().white);
      }
      return _results;
    })();
    console.log(header);
    return console.log(formattedLines.join('\n'));
  } catch (err) {
    return handleError('printAstronomicalData', err);
  }
};

getDataFor(zip, function(err, data) {
  if (err != null) {
    return handleError('main', err);
  } else {
    return printAstronomicalData(data);
  }
});
